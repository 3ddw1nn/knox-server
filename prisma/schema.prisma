generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  id             String         @id @default(uuid())
  name           String
  contactEmail   String         @unique
  billingAddress String?
  createdAt      DateTime       @default(now()) @db.Timestamp(6)
  updatedAt      DateTime       @updatedAt @db.Timestamp(6)
  supabaseUserId String?        @unique
  activations    Activation[]
  licenseKeys    LicenseKey[]
  monthlyUsage   MonthlyUsage[]
  software       Software[]

  @@index([createdAt])
  @@index([supabaseUserId])
}

model Software {
  id           String         @id @default(uuid())
  name         String
  vendorId     String
  pricingModel PricingModel
  pricePerUse  Float?
  monthlyRate  Float?
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @updatedAt @db.Timestamp(6)
  activations  Activation[]
  licenseKeys  LicenseKey[]
  monthlyUsage MonthlyUsage[]
  vendor       Vendor         @relation(fields: [vendorId], references: [id])

  @@index([vendorId, createdAt, id])
}

model LicenseKey {
  id             String        @id @default(uuid())
  key            String        @unique
  status         LicenseStatus @default(AVAILABLE)
  vendorId       String
  softwareId     String
  expiresAt      DateTime?     @db.Timestamp(6)
  notes          String?
  createdAt      DateTime      @default(now()) @db.Timestamp(6)
  updatedAt      DateTime      @updatedAt @db.Timestamp(6)
  activatedAt    DateTime?     @db.Timestamp(6)
  activatedById  String?
  canceledAt     DateTime?     @db.Timestamp(6)
  canceledReason String?
  activation     Activation?
  activatedBy    Employee?     @relation("ActivatedKeys", fields: [activatedById], references: [id])
  software       Software      @relation(fields: [softwareId], references: [id])
  vendor         Vendor        @relation(fields: [vendorId], references: [id])

  @@index([vendorId, softwareId, createdAt, id])
  @@index([activatedAt])
}

model Activation {
  id                  String     @id @default(uuid())
  licenseKeyId        String     @unique
  activatedById       String
  softwareId          String
  vendorId            String
  headsetSerialNumber String?
  activatedAt         DateTime   @default(now()) @db.Timestamp(6)
  createdAt           DateTime   @default(now()) @db.Timestamp(6)
  activatedBy         Employee   @relation("PerformedActivations", fields: [activatedById], references: [id])
  licenseKey          LicenseKey @relation(fields: [licenseKeyId], references: [id])
  software            Software   @relation(fields: [softwareId], references: [id])
  vendor              Vendor     @relation(fields: [vendorId], references: [id])

  @@index([vendorId, activatedAt, id])
  @@index([createdAt])
}

model Employee {
  id                   String       @id @default(uuid())
  name                 String
  email                String       @unique
  role                 EmployeeRole @default(EMPLOYEE)
  createdAt            DateTime     @default(now()) @db.Timestamp(6)
  updatedAt            DateTime     @updatedAt @db.Timestamp(6)
  companyName          String?
  supabaseUserId       String?      @unique
  performedActivations Activation[] @relation("PerformedActivations")
  activatedKeys        LicenseKey[] @relation("ActivatedKeys")

  @@index([createdAt])
  @@index([supabaseUserId])
}

model MonthlyUsage {
  id           String   @id @default(uuid())
  vendorId     String
  softwareId   String
  month        DateTime @db.Date
  usageCount   Int
  totalOwed    Float
  calculatedAt DateTime @default(now()) @db.Timestamp(6)
  software     Software @relation(fields: [softwareId], references: [id])
  vendor       Vendor   @relation(fields: [vendorId], references: [id])

  @@unique([vendorId, softwareId, month])
  @@index([vendorId, softwareId, month])
}

enum PricingModel {
  FLAT
  PER_USE
  MONTHLY_SUBSCRIPTION
}

enum LicenseStatus {
  AVAILABLE
  ACTIVATED
  CANCELED
}

enum EmployeeRole {
  EMPLOYEE
  ADMIN
  VENDOR
}
