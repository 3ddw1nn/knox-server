---
description: 
globs: 
alwaysApply: false
---
name: VR License Management Backend
description: MVP backend requirements for a VR license management system using NestJS and Prisma with PostgreSQL

requirements:
  auth:
    description: Use Supabase for employee authentication.
    method: email/password (managed by Supabase)
    backend_verification:
      type: JWT
      method: Supabase JWT verification with NestJS
      attach_user: true # Decoded Supabase user information will be attached to the request
    notes: User identities are managed by Supabase. The local 'Employee' table stores application-specific roles and data, and should be linked to Supabase users (e.g., by Supabase User ID or email).

  roles:
    Employee:
      - View available licenses
      - Activate a license key
      - View license usage and total owed per vendor
    Vendor:
      - Upload license keys
      - View license key status summary
      - View monthly revenue owed

  models:
    Vendor:
      fields: [id, name, contactEmail, createdAt, updatedAt]
    Software:
      fields: [id, name, vendorId (FK), pricingModel (enum), pricePerUse, monthlyRate, createdAt, updatedAt]
    LicenseKey:
      fields: [id, key (unique), status (available|activated|canceled), vendorId, softwareId, activatedAt, activatedById (FK), canceledAt, createdAt, updatedAt]
    Employee:
      fields: [id, name, email (unique), passwordHash, role (admin|employee), createdAt, updatedAt]
    Activation:
      fields: [id, licenseKeyId (FK), employeeId (FK), vendorId, softwareId, activatedAt, headsetSerialNumber (optional), createdAt]
    MonthlyUsage (optional):
      fields: [vendorId, softwareId, month, usageCount, totalOwed, calculatedAt]

  endpoints:
    auth:
      - POST /auth/login: validate employee credentials, return JWT
    employee:
      - GET /licenses/available
      - POST /licenses/:id/activate
      - GET /vendors/owed
    vendor:
      - POST /licenses/upload
      - GET /licenses/status-summary
      - GET /revenue/monthly

  logic:
    - License can only be activated if status is 'available'
    - Activation sets:
        - status → activated
        - activatedAt → current timestamp
        - activatedById → current employee
    - License keys hidden until activated
    - Activated licenses count toward vendor monthly total based on pricingModel
    - Vendors may cancel keys (optional stretch goal)

  tech_stack:
    - NestJS
    - Prisma
    - PostgreSQL

  env:
    required_vars:
      - DATABASE_URL # For the primary application database (Prisma + PostgreSQL)
      - SUPABASE_URL # Your Supabase project URL
      - SUPABASE_ANON_KEY # Your Supabase project anon key
      # SUPABASE_SERVICE_ROLE_KEY # May be needed if backend needs to perform admin actions on Supabase users
